
import java.util.Arrays;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author louienicholaslee International School Manila 13-inch
 * MacBook Pro, NetBeans. Purpose: To help facilitate learning of new vocabulary in
 * foreign languages
 * 
 * The main screen that is used throughout. this acts as the main window from which
 * other forms branch out from
 */
public class StartScreenForm extends javax.swing.JFrame {
    private AppLogic appLogic;

    /**
     * Creates new form StartScreen
     */
    public StartScreenForm(AppLogic al) {
        initComponents();
        this.appLogic = al;
        //Prompts the user to choose the language they want to learn in
        ChangeLanguagesForm cl = new ChangeLanguagesForm(this, true);
        cl.setVisible(true);
        //Changes the working diretory and language to that chosen by the user
        appLogic.setWorkingDirectory(cl.getLanguage());
        //Populates the Titles List to show the available vocabulary set
        Titles.setListData(appLogic.readTitles());
    }

    /**
     * This method is called from with6in the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        Test1 = new javax.swing.JButton();
        ChangeLanguage = new javax.swing.JButton();
        View = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        Edit = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Titles = new javax.swing.JList();
        Test = new javax.swing.JButton();
        Delete = new javax.swing.JButton();

        jToggleButton1.setText("View List");

        jList1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jList1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(jList1);

        jScrollPane2.setViewportView(jTree1);

        Test1.setText("Test");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ChangeLanguage.setText("Change Language");
        ChangeLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeLanguageActionPerformed(evt);
            }
        });

        View.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        View.setText("View");
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });

        Add.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        Add.setText("Add ");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Edit.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        Edit.setText("Edit ");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        Titles.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Basic Nouns", "Advanced Nouns", "Verbs", "Colors", "Household Objects", "Words not yet memorized" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(Titles);

        Test.setText("Test");
        Test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(Add)
                            .add(Edit)
                            .add(View)
                            .add(Test)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, Delete)))
                    .add(layout.createSequentialGroup()
                        .add(75, 75, 75)
                        .add(ChangeLanguage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {Add, Delete, Edit, Test, View}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(Add)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Edit)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(View)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Test)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Delete))
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 163, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ChangeLanguage)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jList1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jList1AncestorAdded

    //Leads to the add window where the user add a new vocabulary set
    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        //Uses the same form as Edit to simplify code. Difference is that the add
        //button brings an empty vocabulary set
        EditSetForm esf = new EditSetForm(this, true, appLogic.isPhoneticLanguage());
        esf.setVisible(true);
        if (esf.getTitle() != null) {
            //If the user has properly added a vocabulary set, the files with the 
            //titles of vocabulary sets is updated and the Titles List is updated
            //All of the words created is saved to appropriate txt file.
            appLogic.writeTitle(esf.getTitle());
            Titles.setListData(appLogic.readTitles());
            appLogic.saveWordSet(esf.getWordSet(), esf.getTitle());
        }
    }//GEN-LAST:event_AddActionPerformed
    
    //Changes the language, prompting the user to choose from chinese, spanish,
    //french. this edits the working directory of the program
    private void ChangeLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeLanguageActionPerformed
        //Shows the change language form
        ChangeLanguagesForm clf = new ChangeLanguagesForm(this, true);
        clf.setVisible(true);
        //Changes working directory
        appLogic.setWorkingDirectory(clf.getLanguage());
        //Updates Titles list with vocabulary set titles from the new language
        Titles.setListData(appLogic.readTitles());
    }//GEN-LAST:event_ChangeLanguageActionPerformed

    //Similar to add button shows a populated form
    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        //Protects from editing a vocabulary set without choosing one
        if (Titles.getSelectedValue() != null) {
            //Makes sure that words not yet memorized set is not editable
            if (Titles.getSelectedValue().toString().equalsIgnoreCase("Words Not Yet Memorized")) {
                JOptionPane.showMessageDialog(null, "Cannot edit this vocabulary set.");
            } else {
                //Stores the vocabulary set title chosen
                String editSetTitle = Titles.getSelectedValue().toString();
                //Opens up the new form that is populated with the words already 
                //existing beforehand and the title of the vocabulary set
                EditSetForm esf = new EditSetForm(this, true, appLogic.readWordSet(editSetTitle),
                        editSetTitle, appLogic.isPhoneticLanguage());
                esf.setVisible(true);
                //If user has correctly edited the files and lists are updated
                if (esf.getTitle() != null) {
                    appLogic.editTitle(Titles.getSelectedIndex(), esf.getTitle());
                    Titles.setListData(appLogic.readTitles());
                    appLogic.deleteSet(esf.getTitle());
                    appLogic.saveWordSet(esf.getWordSet(), esf.getTitle());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a vocabulary set to edit");
        }
    }//GEN-LAST:event_EditActionPerformed

    //Allows the user to delete a vocabulary set
    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        //Protects from user choosing to delete without having chosen a vocabulary
        //set to delete
        if (Titles.getSelectedIndex() != -1) {
            //Protects from user deleting the words not yet memorized set
            if (Titles.getSelectedValue().toString().equalsIgnoreCase("Words Not Yet Memorized")) {
                JOptionPane.showMessageDialog(null, "Cannot delete this vocabulary set."
                        + " You must do the test for this set and answer all questions correctly to delete it");
            } else {
                //Deletes the vocabulary set title from the file that stores all
                //the vocabulary set titles
                appLogic.deleteTitle(Titles.getSelectedIndex());
                //Deletes file that stores the words of the vocabulary set in 
                //memory
                appLogic.deleteSet(Titles.getSelectedValue().toString());
                //Updates the titles list
                Titles.setListData(appLogic.readTitles());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a vocabulary set to delete");
        }
    }//GEN-LAST:event_DeleteActionPerformed

    //Allows the user to view the vocabulary set they wish to see
    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed
        //Protects from viewing a non-specified vocabulary set
        if (Titles.getSelectedIndex() != -1) {
            //Stores the title of the set that will be viewed
            String viewSetTitle = Titles.getSelectedValue().toString();
            //Opens view form
            ViewForm vf = new ViewForm(this, true, appLogic.readWordSet(viewSetTitle),
                    appLogic.isPhoneticLanguage(), Titles.getSelectedValue().toString());
            vf.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a vocabulary set to view");
        }
    }//GEN-LAST:event_ViewActionPerformed

    //Allows the user to test how well they know the vocabulary set
    private void TestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestActionPerformed
        //Protects from going to a test that is not specified
        if (Titles.getSelectedIndex() != -1) {
            //Stores title of the set that will be tested
            String testSetTitle = Titles.getSelectedValue().toString();
            //Opens the test form
            TestForm tf = new TestForm(this, true, appLogic.readWordSet(testSetTitle),
                    appLogic.isPhoneticLanguage(), Titles.getSelectedValue().toString());
            tf.setVisible(true);
            //Displays a message if the user has perfected the test
            if (tf.getNumWrong() > 0) {
                //If not perfect, a message showing their results is shown
                JOptionPane.showMessageDialog(null, "You answered " + 
                        (tf.getNumQuestions() - tf.getNumWrong()) + 
                        " questions correctly out of " + tf.getNumQuestions());
                //The user is then shown the list of words they got incorrect by
                //opening the view form
                ViewForm vf = new ViewForm(this, true, tf.getIncorrectAnswers(), appLogic.isPhoneticLanguage());
                vf.setVisible(true);
                //Repopulates the list
            } else {
                JOptionPane.showMessageDialog(null, "Congratulations! You scored perfectly on the test");
                //Repopulates the list
            }
                            Titles.setListData(appLogic.readTitles());

        } else {
            JOptionPane.showMessageDialog(null, "Please select a vocabulary set to test yourself with");
        }
    }//GEN-LAST:event_TestActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton ChangeLanguage;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Edit;
    private javax.swing.JButton Test;
    private javax.swing.JButton Test1;
    private javax.swing.JList Titles;
    private javax.swing.JButton View;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
