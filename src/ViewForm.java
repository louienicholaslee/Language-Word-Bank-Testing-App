
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * @author louienicholaslee International School Manila 13-inch
 * MacBook Pro, NetBeans. Purpose: To help facilitate learning of new vocabulary in
 * foreign languages
 * 
 * Views the preexisting vocabulary one word at a time
 */
public class ViewForm extends javax.swing.JDialog {
    //Shows the current position in the word array, ie which word is being viewed
    private int currentIndex = 0;
    //Stores the array of words that will be viewed
    private Word[] wordArray = null;
    private boolean phoneticLanguage;

    /**
     * Creates new form ViewForm Constructor that is used to view specific
     * vocabulary sets that that user has created
     */
    public ViewForm(java.awt.Frame parent, boolean modal,
            Word[] wordArray, boolean phoneticLanguage, String title) {
        super(parent, modal);
        initComponents();
        this.wordArray = wordArray;
        this.phoneticLanguage = phoneticLanguage;
        //Shows the title of the vocabulary set
        VocabSetTitle.setText(title);
        //Makes the text fields uneditable
        Word.setEditable(false);
        Meaning.setEditable(false);
        Example.setEditable(false);
        Pronunciation.setEditable(false);
        //Enters the correct information on the word to the form
        Word.setText(wordArray[0].getWord());
        Meaning.setText(wordArray[0].getMeaning());
        Example.setText(wordArray[0].getExample());
        //Shows the picture
        Image.setIcon(new ImageIcon(this.getClass().getResource("/ImageDirectory/" +
                wordArray[0].getImgName())));
        //Displays the pronunciation if applicable
        if (phoneticLanguage) {
            Pronunciation.setText(((WordWPron) wordArray[0]).getPronunciation());
        } else {
            Pronunciation.setText("Not Available");
        }
    }

    //Constructor that is used to show the solutions to the incorrectly answered
    //questions
    public ViewForm(java.awt.Frame parent, boolean modal, Word[] wordArray, boolean phoneticLanguage) {
        super(parent, modal);
        initComponents();
        this.wordArray = wordArray;
        this.phoneticLanguage = phoneticLanguage;
        //Corrects the labels
        Label.setText("Solutions");
        VocabSetTitle.setText("Incorrect Answers");
        //Makes the text fields uneditable
        Word.setEditable(false);
        Meaning.setEditable(false);
        Example.setEditable(false);
        Pronunciation.setEditable(false);
        //Enters the correct information on the word to the form
        Word.setText(wordArray[0].getWord());
        Meaning.setText(wordArray[0].getMeaning());
        Example.setText(wordArray[0].getExample());
        //Shows the picture
        Image.setIcon(new ImageIcon(this.getClass().getResource("/ImageDirectory/" +
                wordArray[0].getImgName())));
        //Displays the pronunciation if applicable
        if (phoneticLanguage) {
            Pronunciation.setText(((WordWPron) wordArray[0]).getPronunciation());
        } else {
            Pronunciation.setText("Not Available");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        Word = new javax.swing.JTextField();
        Meaning = new javax.swing.JTextField();
        Label = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Pronunciation = new javax.swing.JTextField();
        Image = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Example = new javax.swing.JTextField();
        Next = new javax.swing.JButton();
        Previous = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        VocabSetTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel3.setText("Meaning");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel6.setText("Pronunciation");

        Word.setEditable(false);
        Word.setText("Happy");

        Meaning.setEditable(false);
        Meaning.setText("快樂");

        Label.setFont(new java.awt.Font("Hobo Std", 0, 70)); // NOI18N
        Label.setText("View Words");

        jLabel4.setText("Example");

        Pronunciation.setEditable(false);
        Pronunciation.setText("Kuai Le");

        Image.setMaximumSize(new java.awt.Dimension(100, 100));
        Image.setMinimumSize(new java.awt.Dimension(100, 100));
        Image.setPreferredSize(new java.awt.Dimension(100, 100));

        jLabel2.setText("Word");

        Example.setEditable(false);
        Example.setText("我很快樂");

        Next.setText("Next");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        Previous.setText("Previous");
        Previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousActionPerformed(evt);
            }
        });

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        VocabSetTitle.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        VocabSetTitle.setText("Nouns");
        VocabSetTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(Image, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 500, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel3)
                                    .add(jLabel2)
                                    .add(jLabel6)
                                    .add(jLabel4))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, Word, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(Example, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 536, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, Meaning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 353, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, Pronunciation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 353, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(Label))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(VocabSetTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(Previous)
                        .add(115, 115, 115)
                        .add(Next, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(132, 132, 132)
                        .add(Exit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(103, 103, 103))))
        );

        layout.linkSize(new java.awt.Component[] {Example, Meaning, Pronunciation, Word}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(Label)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(VocabSetTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(Word, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(31, 31, 31)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Meaning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3))
                        .add(26, 26, 26)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Pronunciation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel6))
                        .add(23, 23, 23)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Example, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(20, 20, 20)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Previous)
                            .add(Next)
                            .add(Exit))
                        .add(36, 36, 36))
                    .add(layout.createSequentialGroup()
                        .add(Image, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 500, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 1, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jSeparator2)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Shows the previous word in the vocabulary set
    private void PreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviousActionPerformed
        //Shows a message that tells the reader that they can't go back any more
        //due to there being no more words
        if (currentIndex > 0) {
            //Lowers the current position of the word as the user looks back at
            //previous words
            currentIndex--;
            Word.setText(wordArray[currentIndex].getWord());
            Meaning.setText(wordArray[currentIndex].getMeaning());
            Example.setText(wordArray[currentIndex].getExample());
            Image.setIcon(new ImageIcon(this.getClass().getResource("/ImageDirectory/" +
                    wordArray[currentIndex].getImgName())));
            if (phoneticLanguage) {
                Pronunciation.setText(((WordWPron) wordArray[currentIndex]).getPronunciation());
            } else {
                Pronunciation.setText("Not Available");
            }
        } else {
            //Mastery Factor: Use of additional Java Library
            JOptionPane.showMessageDialog(null, "There are no more words that come before this word");
        }
    }//GEN-LAST:event_PreviousActionPerformed

    //Shows the next word in the vocabulary set
    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        //Shows a message that tells the reader that there are no more words in
        //the vocabulary set
        if (currentIndex < wordArray.length - 1) {
            currentIndex++;
            Word.setText(wordArray[currentIndex].getWord());
            Meaning.setText(wordArray[currentIndex].getMeaning());
            Example.setText(wordArray[currentIndex].getExample());
            Image.setIcon(new ImageIcon(this.getClass().getResource("/ImageDirectory/" +
                    wordArray[currentIndex].getImgName())));
            if (phoneticLanguage) {
                Pronunciation.setText(((WordWPron) wordArray[currentIndex]).getPronunciation());
            } else {
                Pronunciation.setText("Not Available");
            }
        } else {
            JOptionPane.showMessageDialog(null, "There are no more words that come after this word");
        }
    }//GEN-LAST:event_NextActionPerformed

    //Exits the view form
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_ExitActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Example;
    private javax.swing.JButton Exit;
    private javax.swing.JLabel Image;
    private javax.swing.JLabel Label;
    private javax.swing.JTextField Meaning;
    private javax.swing.JButton Next;
    private javax.swing.JButton Previous;
    private javax.swing.JTextField Pronunciation;
    private javax.swing.JLabel VocabSetTitle;
    private javax.swing.JTextField Word;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
