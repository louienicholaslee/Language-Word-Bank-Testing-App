
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * @author louienicholaslee International School Manila 13-inch
 * MacBook Pro, NetBeans. Purpose: To help facilitate learning of new vocabulary
 * in foreign languages
 *
 * Tests the user on preexisting vocabulary set
 */
public class TestForm extends javax.swing.JDialog {
    //Shows the current position in the word array, ie which word is being tested

    private int currentIndex = 0;
    //Stores the array of words in the vocabulary set being tested
    private Word[] wordArray = null;
    //Stores the incorrectly answered words. will be used to populate the view
    //Form to show the solutions to incorrectly answered questions
    private Word[] incorrectlyAnswered = null;
    private boolean phoneticLanguage;
    //Stores the answers of the user
    private String[] answers = null;
    //Stores the number of questions that will be tested
    private int numQuestions;
    //Stores the number of incorrect answers that user has
    private int numWrong = 0;

    /**
     * Creates new form TestForm
     */
    public TestForm(java.awt.Frame parent, boolean modal, Word[] wordArray,
            boolean phoneticLanguage, String title) {
        super(parent, modal);
        initComponents();
        this.wordArray = wordArray;
        //Number of questions is equal to the number of words in the array
        numQuestions = wordArray.length;
        //The number of answers must correspond to the number of questions
        answers = new String[numQuestions];
        //Sets the answers as blanks instead of null to avoid nullpointerexcpetion error
        for (int i = 0; i < numQuestions; i++) {
            answers[i] = "";
        }
        this.phoneticLanguage = phoneticLanguage;
        //Indicates the vocabulary set being tested
        VocabSetTitle.setText(title);
        //Sets the word field as editable so the the user can input their answer
        Word.setEditable(true);
        //Sets other fields as uneditable
        Meaning.setEditable(false);
        Example.setEditable(false);
        Pronunciation.setEditable(false);
        //Sets the Word field blank
        Word.setText(null);
        //Enters the correct information about the word in the form
        Meaning.setText(wordArray[currentIndex].getMeaning());
        Example.setText(wordArray[currentIndex].getExample());
        //Shows the image of the word
        Image.setIcon(new ImageIcon(this.getClass().getResource("/ImageDirectory/"
                + wordArray[currentIndex].getImgName())));
        //Adds the pronunciation if applicable
        if (phoneticLanguage) {
            Pronunciation.setText(((WordWPron) wordArray[currentIndex]).getPronunciation());
        } else {
            Pronunciation.setText("Not Available");
        }
    }

//-------------------------------Accessor Methods-----------------------------//
    public Word[] getIncorrectAnswers() {
        return incorrectlyAnswered;
    }

    public int getNumWrong() {
        return numWrong;
    }

    public int getNumQuestions() {
        return numQuestions;
    }
//----------------------------------------------------------------------------//

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Done = new javax.swing.JButton();
        VocabSetTitle = new javax.swing.JLabel();
        Next = new javax.swing.JButton();
        Previous = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Example = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        Image = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Meaning = new javax.swing.JTextField();
        Word = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Pronunciation = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Done.setText("Done");
        Done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoneActionPerformed(evt);
            }
        });

        VocabSetTitle.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        VocabSetTitle.setText("Nouns");
        VocabSetTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        Next.setText("Next");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        Previous.setText("Previous");
        Previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousActionPerformed(evt);
            }
        });

        jLabel2.setText("Word");

        Example.setEditable(false);
        Example.setText("我很快樂");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel3.setText("Meaning");

        Image.setMaximumSize(new java.awt.Dimension(100, 100));
        Image.setMinimumSize(new java.awt.Dimension(100, 100));
        Image.setPreferredSize(new java.awt.Dimension(100, 100));

        jLabel5.setFont(new java.awt.Font("Hobo Std", 0, 70)); // NOI18N
        jLabel5.setText("Test ");

        Meaning.setEditable(false);
        Meaning.setText("快樂");

        Word.setEditable(false);
        Word.setText("Happy");

        jLabel6.setText("Pronunciation");

        Pronunciation.setEditable(false);
        Pronunciation.setText("Kuai Le");

        jLabel4.setText("Example");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(Image, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 500, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(Previous)
                        .add(149, 149, 149)
                        .add(Next, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(146, 146, 146)
                        .add(Done, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(76, 76, 76))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel3)
                                    .add(jLabel2)
                                    .add(jLabel6)
                                    .add(jLabel4))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, Meaning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 353, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, Word)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, Pronunciation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 353, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, Example, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 563, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(layout.createSequentialGroup()
                                .add(jLabel5)
                                .add(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(VocabSetTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        layout.linkSize(new java.awt.Component[] {Example, Meaning, Pronunciation}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(VocabSetTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(Word, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(31, 31, 31)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Meaning, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3))
                        .add(26, 26, 26)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Pronunciation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel6))
                        .add(23, 23, 23)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Example, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(20, 20, 20)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Previous)
                            .add(Next)
                            .add(Done))
                        .add(36, 36, 36))
                    .add(layout.createSequentialGroup()
                        .add(Image, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 500, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jSeparator2)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //The user presses this button to indicate that they are finished with the
    //test. The number of incorrects is counted and the incorrectlyAnswered word
    //array is populated. The test form is then closed
    private void DoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoneActionPerformed
        //A temporary word array that will be used to store the words that have
        //not yet been memorized, ie ones that have the wrong answers
        Word[] tmp = new Word[numQuestions];
        //Ensures that the answer to the currect question is saved
        answers[currentIndex] = Word.getText().trim();
        //Populates the tmp word array and calcates the number of mistakes
        for (int i = 0; i < numQuestions; i++) {
            if (!answers[i].trim().equalsIgnoreCase(wordArray[i].getWord())) {
                tmp[numWrong++] = wordArray[i];
                //Adds the word not yet memorized if the question corresponding
                //to the word is not correctly answered and if the word is not
                //already in the vocabulary set
                //Protects from duplicating
                if (!AppLogic.wordsNotMemorized.find(wordArray[i])) {
                    AppLogic.wordsNotMemorized.insert(wordArray[i]);
                }
            } else {
                //Removes the words from the words not yet memorized set if the
                //user answers that question for the word correctly and if the
                //word was in the set to begin with
                if (AppLogic.wordsNotMemorized.find(wordArray[i])) {
                    AppLogic.wordsNotMemorized.remove(wordArray[i]);
                }
            }
        }
        //Stores the words with questions answered incorrectly to the incorrectlyAnswered
        //word array
        if (numWrong > 0) {
            incorrectlyAnswered = new Word[numWrong];
            for (int j = 0; j < numWrong; j++) {
                incorrectlyAnswered[j] = tmp[j];
            }
        }
        this.dispose();
    }//GEN-LAST:event_DoneActionPerformed

    //Shows the next word in the test and stores the answer
    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        //Shows a message that tells the reader that they can't go back any more
        //Due to there being no more words
        if (currentIndex < wordArray.length - 1) {
            //Stores the answers
            answers[currentIndex] = Word.getText().trim();
            //Increments the current index to indicate the position
            currentIndex++;
            //Rewrites the form to include the information on the next word
            Word.setText(answers[currentIndex]);
            Meaning.setText(wordArray[currentIndex].getMeaning());
            Example.setText(wordArray[currentIndex].getExample());
            Image.setIcon(new ImageIcon(this.getClass().getResource("/ImageDirectory/"
                    + wordArray[currentIndex].getImgName())));
            if (phoneticLanguage) {
                Pronunciation.setText(((WordWPron) wordArray[currentIndex]).getPronunciation());
            } else {
                Pronunciation.setText("Not Available");
            }
        } else {
            JOptionPane.showMessageDialog(null, "You have reached the end of the test. "
                    + "You can go back to previous questions by pressing the previous button "
                    + "or finish the test by pressing the done button.");
        }
    }//GEN-LAST:event_NextActionPerformed

    //Shows the previous word in the test and stores the answer
    private void PreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviousActionPerformed
        //Shows a message that tells the reader that they can't go back any more
        //due to there being no more words
        if (currentIndex > 0) {
            //Stores the answer
            answers[currentIndex] = Word.getText().trim();
            //Decrements the current indext to indicate the position
            currentIndex--;
            //Rewrites the form to include the information on the next word
            Word.setText(answers[currentIndex]);
            Meaning.setText(wordArray[currentIndex].getMeaning());
            Example.setText(wordArray[currentIndex].getExample());
            Image.setIcon(new ImageIcon(this.getClass().getResource("/ImageDirectory/"
                    + wordArray[currentIndex].getImgName())));
            if (phoneticLanguage) {
                Pronunciation.setText(((WordWPron) wordArray[currentIndex]).getPronunciation());
            } else {
                Pronunciation.setText("Not Available");
            }
        } else {
            JOptionPane.showMessageDialog(null, "There are no more words that come before this word");
        }
    }//GEN-LAST:event_PreviousActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Done;
    private javax.swing.JTextField Example;
    private javax.swing.JLabel Image;
    private javax.swing.JTextField Meaning;
    private javax.swing.JButton Next;
    private javax.swing.JButton Previous;
    private javax.swing.JTextField Pronunciation;
    private javax.swing.JLabel VocabSetTitle;
    private javax.swing.JTextField Word;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
